@using PL.Web.API
@using Common.Entities
@using System.Text.RegularExpressions
@{ 
    var userAPI = new UsersAPI();
    var awardAPI = new AwardsAPI();

    string type = Request["Type"];
    Guid id;
    Guid.TryParse(Request["Id"], out id);
    string name = Request["Name"];
    string ava = Request["Avatar"];

    if (ava.Length == 0)
    {
        ava = null;
    }

    if (type == "user")
    {
        string nameCheck = @"[a-zA-Z0-9_\-]{3,}";

        var dateArr = Request["DateOfBirth"].Split('-');
        if (dateArr.Length != 3)
        {
            Response.Write("Incorrect date");
            return;
        }
        int year, mount, day;
        int.TryParse(dateArr[0], out year);
        int.TryParse(dateArr[1], out mount);
        int.TryParse(dateArr[2], out day);

        var birthDay = new DateTime(year, mount, day);

        if (!Regex.IsMatch(name, nameCheck))
        {
            Response.Write("Invalid username!");
        }
        else
        {
            var users = userAPI.GetAllUsers();
            if (users.Where(usr => usr.Name == name && usr.Id != id).Any())
            {
                Response.Write("A user with the same name already exists!");
                return;
            }
            var user = new User(name, birthDay, ava);
            if (id != Guid.Empty)
            {
                userAPI.UpdateUserById(id, user);
            }
            else
            {
                userAPI.AddUser(user);
            }
        }
    }
    else
    {
        string nameCheck = @"[a-zA-Zа-яА-ЯёЁ0-9_\-\s]{3,}";

        if (!Regex.IsMatch(name, nameCheck))
        {
            Response.Write("Invalid award title!");
        }
        else
        {
            var awards = awardAPI.GetAllAwards();
            if (awards.Where(awrd => awrd.Title == name && awrd.Id != id).Any())
            {
                Response.Write("Award title must be unique!");
                return;
            }
            var award = new Award(name, ava);
            if (id != Guid.Empty)
            {
                awardAPI.UpdateAwardById(id, award);
            }
            else
            {
                awardAPI.AddAward(award);
            }
        }
    }
}